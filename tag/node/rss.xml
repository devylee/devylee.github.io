<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>elsewhere</title>
   <link>https://devylee.github.io</link>
   <description>一个辅助记忆的树洞</description>
   <language>zh-CN</language>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
    
	<item>
	  <title>在Web前端开发中使用Node和webpack</title>
	  <link>https://devylee.github.io/post/2017/06/a-sample-front-end-solution-using-webpack.html</link>
	  <author>Devy</author>
	  <pubDate>2017-06-09T09:30:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/06/a-sample-front-end-solution-using-webpack.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>标题说的很明白，本文我只介绍使用<a href="https://nodejs.org">Node</a>和<a href="https://webpack.js.org/">webpack</a>来实现的一个Web前端的构建方案，而不是一个Node实现的全栈方案。至于后端，其实我个人觉得有很多比Node更好的选择，但这不是本文的重点。</p>
</blockquote>

<!--more-->

<h2 id="写在前面">写在前面</h2>

<p>Node火了，似乎你不用Node都不好意思说自己是个全栈！但你确定要在你的项目中使用一个前后端都是JS的全栈？任何一种技术都有它值得推崇的地方，但同样也有它适合和不适的领域，所以我个人在项目的技术体系和方案选择上会综合很多因素来选择<strong class="highlight">相对适合</strong>的，从不会撕逼于各种技术社区和流派！</p>

<p>Well，你可能要问，我<strong class="highlight">选择Node+webpack做前端的理由是什么</strong>呢？好吧，我承认这是个问题，但其实，我也只是在尝试组合了几种方案之后觉得这个还蛮简单的！因为我的需求本就不复杂：</p>

<ul>
  <li>首先，我需要一个前端资源的bundler；</li>
  <li>其次，要兼容当下主流的JS模块化规范（<a href="http://www.commonjs.org/">CommonJS</a>、<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>之类）；</li>
  <li>最后，就是要有一个方便本地开发调试的服务。</li>
</ul>

<p>好啦，废话说的有点多，该放码了！</p>

<h2 id="那就开始吧">那就开始吧</h2>

<p><a href="https://nodejs.org/en/download/">Node的安装</a>我不想赘述，很容易就可以寻到针对不同系统的安装Guide，我就当你的系统里已经有Node了，至于webpack的版本，当然是2.x！首先，我们来初始化一个项目，你可以手动或者像我一样使用<code class="highlighter-rouge">npm init</code>创建一个<code class="highlighter-rouge">package.json</code>，内容大概会是这个样子：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"using-webpack"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a sample about using webpack"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>接下来，我们要安装几个依赖：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev webpack webpack-dev-server
</code></pre>
</div>

<p>如果你的js要用到lodash、jQuery之类，可以继续安装它们：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save lodash jquery
</code></pre>
</div>

<p>这些依赖默认都会安装到node_modules目录下，我们看下<code class="highlighter-rouge">package.json</code>，多了<code class="highlighter-rouge">devDependencies</code>和<code class="highlighter-rouge">dependencies</code>（当然你也可以手动编写<code class="highlighter-rouge">package.json</code>然后运行<code class="highlighter-rouge">npm install</code>命令来安装这些依赖）：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nt">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"webpack"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.6.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"webpack-dev-server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.4.5"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"jquery"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.2.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"lodash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.4"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre>
</div>

<p>下面，我们来创建一个static文件夹用来存放所有的前端资源文件（JS、CSS、图片、字体等等）和一个webpack配置文件<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'js'</span><span class="p">,</span> <span class="s1">'[name].bundle.js'</span><span class="p">),</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>我们需要一个简单的HTML文件<code class="highlighter-rouge">static/sample.html</code>：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;title&gt;</span>Sample Page<span class="nt">&lt;/title&gt;</span>

<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Sample Page<span class="nt">&lt;/h1&gt;</span>

        <span class="nt">&lt;p&gt;</span>
            This is a sample html page.
        <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre>
</div>

<p>接下来我们要在<code class="highlighter-rouge">static/js/main.js</code>里写点东西（在页面中追加“Hello World”）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'p'</span><span class="p">);</span>
    <span class="nx">hello</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">'Hello World'</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'div'</span><span class="p">).</span><span class="nx">item</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre>
</div>

<p>我们可以用<a href="https://webpack.js.org/configuration/dev-server/">webpack-dev-server</a>来启动一个开发服务，测试我们的代码，不过，在此之前，我们要来完善一下<code class="highlighter-rouge">webpack.config.js</code>，增加<code class="highlighter-rouge">devServer</code>相关的配置：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
<span class="p">...</span>
  <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">contentBase</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre>
</div>

<p>然后，我们就可以通过命令行<code class="highlighter-rouge">node_modules/.bin/webpack-dev-server --config ./webpack.config.js</code>来启动DevServer，默认地址是<code class="highlighter-rouge">http://localhost:8080/</code>。浏览<code class="highlighter-rouge">http://localhost:8080/sample.html</code>就可以看到效果了。</p>

<blockquote>
  <p>我们可以把上面这个命令配置在<code class="highlighter-rouge">package.json</code>的<code class="highlighter-rouge">scripts</code>中<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>，例如下面的配置，这样启动DevServer，只要执行<code class="highlighter-rouge">npm start</code>就可以了：</p>
  <div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="err">...</span><span class="w">
  </span><span class="nt">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node_modules/.bin/webpack-dev-server --config ./webpack.config.js"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="err">...</span><span class="w">
</span><span class="err">}</span><span class="w">
</span></code></pre>
  </div>
</blockquote>

<p>JS可以加载并工作了，但对于Web前端而言还远远不够，至少我们还需要个样式表！</p>

<h2 id="加载样式">加载样式</h2>

<p>样式表的加载就需要用到webpack的loaders<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>了，对于CSS的加载，我们要用到两个Loader：<a href="https://webpack.js.org/loaders/style-loader/">style-loader</a>和<a href="https://webpack.js.org/loaders/css-loader/">css-loader</a>（<em>如果你的项目用到<a href="http://lesscss.org/">LESS</a>或者<a href="http://sass-lang.com/">SASS</a>，那你还需要用到<a href="https://webpack.js.org/loaders/less-loader/">less-loader</a>或者<a href="https://webpack.js.org/loaders/sass-loader/">sass-loader</a></em>）。</p>

<p>安装相关依赖</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev style-loader css-loader
</code></pre>
</div>

<p><code class="highlighter-rouge">webpack.config.js</code>增加相关的配置</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="p">[</span> <span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span> <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>增加CSS文件<code class="highlighter-rouge">static/css/app.css</code>，定义一些样式，例如：</p>

<div class="language-css highlighter-rouge"><pre class="highlight"><code><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>
<span class="p">}</span>

<span class="nc">.wrapper</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">80%</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">20px</span> <span class="nb">auto</span><span class="p">;</span>
    <span class="nl">min-width</span><span class="p">:</span> <span class="m">320px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>然后在<code class="highlighter-rouge">static/js/main.js</code>中要import这个CSS：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code>
<span class="kr">import</span> <span class="s1">'../css/app.css'</span><span class="p">;</span>

<span class="p">...</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">npm start</code>并访问<code class="highlighter-rouge">http://localhost:8080/sample.html</code>，是的，我们写的样式生效了，但用浏览器的开发工具看一下你就会发现，这些样式是被webpack打包到<code class="highlighter-rouge">app.bundle.js</code>然后由JS写到页面中。如果我们要把样式输出到相应的css文件，那么我们还需要做一点工作，这个时候就要用到<a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/">ExtractTextWebpackPlugin</a>。首先，我们当然要先安装这个插件：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev extract-text-webpack-plugin
</code></pre>
</div>

<p>然后，配置我们的<code class="highlighter-rouge">webpack.config.js</code>（注意css rule中的<code class="highlighter-rouge">publicPath: '../'</code>，这是根据你的项目来配置的，会影响到css文件中url()函数所引用资源的生成路径）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"extract-text-webpack-plugin"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
          <span class="na">fallback</span><span class="p">:</span> <span class="s2">"style-loader"</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="s2">"css-loader"</span><span class="p">,</span>
          <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'../'</span>
        <span class="p">})</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">({</span>
      <span class="na">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'css'</span><span class="p">,</span> <span class="s1">'[name].bundle.css'</span><span class="p">)</span>
    <span class="p">}),</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>最后我们要在HTML中引入CSS：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    ...
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/app.bundle.css"</span> <span class="nt">/&gt;</span>
    ...
<span class="nt">&lt;/head&gt;</span>

...
</code></pre>
</div>

<p>再<code class="highlighter-rouge">npm start</code>并浏览<code class="highlighter-rouge">http://localhost:8080/sample.html</code>，嗯！Nice~</p>

<h2 id="图片资源">图片资源</h2>

<p>接下来，我们该为页面加上几张图来美化一下了，首先，还是先来安装相应的<a href="https://webpack.js.org/loaders/#files">Loaders</a>，在本例中，我就用<a href="https://webpack.js.org/loaders/file-loader/">file-loader</a>了，因为这个比较简单！执行安装命令：<code class="highlighter-rouge">npm install --save-dev file-loader</code>，然后修改<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">...</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|gif|jpe</span><span class="se">?</span><span class="sr">g</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader'</span><span class="p">,</span>
        <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="s1">'img/[name].[ext]'</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>现在，把要用到的图片放到<code class="highlighter-rouge">static/img</code>目录下，就可以在CSS或者HTML中引用图片了。实际的开发中可能还会遇到字体、视频等静态资源的加载，这些都可以通过配置相应的rules来实现。</p>

<p>写到这里，我们已经可以开始基本的Web前端开发工作了。但实际的项目中我们似乎才只是迈出第一步而已！</p>

<h2 id="build">Build</h2>

<blockquote>
  <p>通常项目发布的时候，我们要将前端资源打包输出，在这个过程中，通常用到的javascript和样式表会被compile或者minify。如果是用到less、sass，会被编译成css，或者用到<a href="http://coffeescript.org/">CoffeeScript</a>之类，也要被编译成javascript。</p>
</blockquote>

<p>webpack为我们提供了方便的<code class="highlighter-rouge">webpack -p</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>命令。还是之前的<code class="highlighter-rouge">webpack.config.js</code>，稍作修改，增加关于输出路径的配置，我们将发布文件输出到<code class="highlighter-rouge">dist/static/</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="nl">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'js'</span><span class="p">,</span> <span class="s1">'[name].bundle.js'</span><span class="p">),</span>
    <span class="nx">path</span><span class="err">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'dist/static/'</span><span class="p">),</span>
    <span class="nx">publicPath</span><span class="err">:</span> <span class="s1">'/'</span>
  <span class="p">},</span>
  <span class="p">...</span>
</code></pre>
</div>

<p>然后执行<code class="highlighter-rouge">node_modules/.bin/webpack -p --config ./webpack.config.js</code>，当然，你也可以把这个命令配置到到<code class="highlighter-rouge">package.json</code>的<code class="highlighter-rouge">scripts</code>中：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="err">...</span><span class="w">
</span><span class="s2">"scripts"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node_modules/.bin/webpack -p --config ./webpack.config.js"</span><span class="p">,</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="err">},</span><span class="w">
</span><span class="err">...</span><span class="w">
</span></code></pre>
</div>

<p>这样，我们只需要执行<code class="highlighter-rouge">npm run build</code>就可以了。</p>

<p>不过你可能会发现一个问题：css中用url()引用的图片可以正常的被输出到dist，但是html中直接引用的图片就不行。解决这个问题的一种办法是在js中声明，比如<code class="highlighter-rouge">import '../img/sample-pic.jpg'</code>或者<code class="highlighter-rouge">require('../img/sample-pic.jpg')</code>；或者使用<a href="https://webpack.js.org/loaders/html-loader/">html-loader</a>来处理引用图片的html文件，即：<code class="highlighter-rouge">npm install --save-dev html-loader</code>然后在js中<code class="highlighter-rouge">require('html-loader!../sample.html')</code>。</p>

<p>不过直接使用html-loader的一个问题是，html文件内容会被一起打包到js中，这并不是我们想要的结果。我们可以利用file-loader和extract-loader将其单独输出：</p>

<p>安装依赖：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>npm install --save-dev extract-loader
</code></pre>
</div>

<p>配置<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">...</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="p">[{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader'</span><span class="p">,</span>
            <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">name</span><span class="p">:</span> <span class="s1">'[name].[ext]'</span><span class="p">,</span>
            <span class="p">},</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'extract-loader'</span><span class="p">,</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'html-loader'</span>
          <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>现在，再次<code class="highlighter-rouge">webpack -p</code>，文件已经可以正确的输出到dist了。不过因为使用了require()，所生成的js中依然会有类似<code class="highlighter-rouge">e.exports='module.exports = __webpack_public_path__ + "sample.html";'</code>这种代码。如果你像我一样对代码有着严重的洁癖，可以把相关的require()移出，比如像我把他放到<code class="highlighter-rouge">webpack.config.js</code>中另外指定了一个叫html的entry：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="p">[</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">),</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/css/app.css'</span><span class="p">)</span>
    <span class="p">],</span>
    <span class="s1">'html'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/sample.html'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>当然这还是会输出一个<code class="highlighter-rouge">html.bundle.js</code>，不过我们完全可以忽略或者删除这个文件！</p>

<h2 id="关于加载第三方库">关于加载第三方库</h2>

<p>实际项目中我们通常还会用到一些第三方的库资源，比如<a href="https://lodash.com/">lodash</a>、<a href="http://jquery.com/">jQuery</a>。只要是npm仓库中有的，都可以通过<code class="highlighter-rouge">npm install</code>来安装，并在代码中import或者require()来使用，或者通过<code class="highlighter-rouge">webpack.config.js</code>配置将这些库单独打成vendor包：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'vendor'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'lodash'</span><span class="p">,</span> <span class="s1">'jquery'</span><span class="p">],</span>
    <span class="p">...</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>然后在HTML文件中通过script标签引用：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    ...
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/vendor.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    ...

<span class="nt">&lt;/head&gt;</span>
...
</code></pre>
</div>

<p><strong class="highlight">需要注意</strong>的是有些类库的使用可能会有一些问题（不过这类问题大多通过webpack或者类库官方的文档就可以找到说明和解决的办法），比如jQuery会出现<code class="highlighter-rouge">Uncaught ReferenceError: jQuery is not defined</code>问题，这个问题是由于webpack打包和minify的过程会对js类库中的变量进行混淆，这会导致jQuery库的$和jQuery全局定义丢失，这个问题可以用<a href="https://webpack.js.org/plugins/provide-plugin/">ProvidePlugin</a>来解决，<code class="highlighter-rouge">webpack.config.js</code>配置：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"webpack"</span><span class="p">);</span>
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">...</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
      <span class="na">$</span><span class="p">:</span> <span class="s2">"jquery"</span><span class="p">,</span>
      <span class="na">jQuery</span><span class="p">:</span> <span class="s2">"jquery"</span>
    <span class="p">})</span>
    <span class="p">...</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>好了，现在你可以放心的在代码中使用$了。我们可以将之前写的那段测试代码改造一下试试效果：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'.wrapper'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;p&gt;Hello World&lt;/p&gt;'</span><span class="p">));</span>
<span class="p">})();</span>
</code></pre>
</div>

<p>嗯，看起来，没什么问题了！</p>

<p>当我们项目有多个entry points，而且又有重复引用类库的时候，你会发现类库被重复的打包在各个js中！这一点webpack也为我们想到了，就是<a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a>插件，使用也并不复杂，就是在<code class="highlighter-rouge">webpack.config.js</code>中增加配置，在本例中可以这样：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"webpack"</span><span class="p">);</span>
<span class="p">...</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'vendor'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'jquery'</span><span class="p">],</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="p">[</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">),</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/css/app.css'</span><span class="p">)</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">...</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
      <span class="na">name</span><span class="p">:</span> <span class="s2">"vendor"</span><span class="p">,</span>
      <span class="na">minChunks</span><span class="p">:</span> <span class="kc">Infinity</span><span class="p">,</span>
    <span class="p">})</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<h2 id="最后">最后</h2>

<p>好了，这个sample算是写完了，完整的代码放在Github上，需要的同学可以<a href="https://github.com/devylee/using-webpack">戳这里</a>。欢迎交流！</p>

<hr />

<p><em>参考：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://docs.npmjs.com/cli/run-script">npm-run-script : Run arbitrary package scripts</a>; <a href="https://docs.npmjs.com/misc/scripts">npm-scripts : How npm handles the "scripts" field</a>&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://webpack.js.org/concepts/loaders/">Webpack Loaders</a>&nbsp;<a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://webpack.js.org/guides/production-build/">Building for Production</a>&nbsp;<a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>


</channel>
</rss>
