<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>elsewhere</title>
   <link>https://devylee.github.io</link>
   <description>一个辅助记忆的树洞</description>
   <language>zh-CN</language>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>在你的博客中集成微信分享</title>
	  <link>https://devylee.github.io/post/2017/06/integrate-weixin-share-to-your-blog.html</link>
	  <author>Devy</author>
	  <pubDate>2017-06-23T17:00:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/06/integrate-weixin-share-to-your-blog.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>如今差不多是全民微信的时代了，朋友圈已经是非常重要的信息获取途径，也是很多人分享信息的重要途径，那不如我们就来聊聊集成微信分享的那点事吧~</p>
</blockquote>

<!--more-->

<h1 id="为什么要集成微信分享">为什么要集成微信分享？</h1>

<p>其实我们已经很容易通过手机和微信来分享一个网页，只要手机中安装了微信，现在大多的手机浏览器都有分享功能，在浏览网页时都可以选择分享到微信、QQ、推特、微博等等这些常用的社交平台。只是在不做处理的情况下，通常分享出来的样子并不那么令人满意，我们更希望有更吸引人的图片和标题、描述神马的。其实不用想，鹅场当然早就提供了解决这类需求的方案的，那就是<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115">JS-SDK</a>。所以本文其实就是介绍如何在最小化改动博客代码的情况下，将这个SDK集成进来。</p>

<p>其实思路很简单，就是将<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115">JS-SDK</a>中关于分享的接口封装到一个JS函数或者对象中，然后再通过JS获取网页中的相关信息（标题、描述……），并将这些信息作为参数传递给这个函数，完成对相关分享接口的引用。</p>

<h1 id="那就开始吧">那就开始吧</h1>

<p>首先，我们来封装JS-SDK，创建一个js文件<code class="highlighter-rouge">wxshare.js</code>，为了让这个JS看起来更通用一些，我用了<a href="https://github.com/umdjs/umd">UMD</a>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">'function'</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">define</span><span class="p">([],</span> <span class="nx">factory</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">===</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">root</span><span class="p">.</span><span class="nx">weixin_share</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">();</span> <span class="c1">// 对象的名称是"weixin_share"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">)(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="s1">'use strict'</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">isWeixin</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"micromessenger"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/**
     * 此方法用于加载JS-SDK
     */</span>
    <span class="kd">function</span> <span class="nx">load_wx_jssdk</span><span class="p">(</span><span class="nx">sdk</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">s</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">resolve</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
            <span class="p">};</span>
            <span class="nx">s</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">reject</span><span class="p">(</span><span class="s1">'failed to load '</span> <span class="o">+</span> <span class="nx">sdk</span><span class="p">);</span>
            <span class="p">};</span>
            <span class="nx">s</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">sdk</span><span class="p">;</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"head"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="cm">/**
     * 这个方法用于加载JS-SDK的权限验证配置
     * 具体说明，请参考https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115
     * 其中的 1.1.3 步骤三：通过config接口注入权限验证配置
     */</span>
    <span class="kd">function</span> <span class="nx">load_config</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isWeixin</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">reject</span><span class="p">(</span><span class="s1">'not weixin'</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">config</span> <span class="o">===</span> <span class="s1">'object'</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// config 可以是json对象，比如{appId:'xxx', signature:'xxx' ...}</span>
                <span class="nx">resolve</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">config</span> <span class="o">===</span> <span class="s1">'string'</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 或者是通过网址异步获取，这是本文推荐的方式！</span>
                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="na">url</span><span class="p">:</span> <span class="nx">config</span><span class="p">,</span>
                    <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
                        <span class="na">l</span><span class="p">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span>
                    <span class="p">},</span>
                    <span class="na">type</span><span class="p">:</span> <span class="s2">"GET"</span><span class="p">,</span>
                    <span class="na">dataType</span><span class="p">:</span> <span class="s2">"json"</span><span class="p">,</span>
                    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                    <span class="p">},</span>
                    <span class="na">error</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">reject</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">reject</span><span class="p">(</span><span class="s1">'unknown config'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="cm">/**
     * 这个方法就是调用JS-SDK的API方法初始化分享属性
     */</span>
    <span class="kd">function</span> <span class="nx">init_share</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isWeixin</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">reject</span><span class="p">(</span><span class="s1">'not weixin'</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">load_wx_jssdk</span><span class="p">(</span><span class="s1">'//res.wx.qq.com/open/js/jweixin-1.2.0.js'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">wx</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
                    <span class="na">debug</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
                    <span class="na">appId</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">appId</span><span class="p">,</span> <span class="c1">//需要后端传入</span>
                    <span class="na">signature</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">signature</span><span class="p">,</span> <span class="c1">//需要后端传入</span>
                    <span class="na">timestamp</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">,</span> <span class="c1">//需要后端传入</span>
                    <span class="na">nonceStr</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">nonceStr</span><span class="p">,</span> <span class="c1">//需要后端传入</span>
                    <span class="na">jsApiList</span><span class="p">:</span> <span class="p">[</span><span class="s1">'onMenuShareTimeline'</span><span class="p">,</span> <span class="s1">'onMenuShareAppMessage'</span><span class="p">]</span>
                <span class="p">});</span>

                <span class="nx">wx</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">reject</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
                <span class="p">});</span>
                <span class="nx">wx</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">// 对话消息</span>
                    <span class="nx">wx</span><span class="p">.</span><span class="nx">onMenuShareAppMessage</span><span class="p">({</span>
                        <span class="na">title</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="c1">// 分享标题</span>
                        <span class="na">desc</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">desc</span><span class="p">,</span> <span class="c1">// 分享描述</span>
                        <span class="na">link</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">link</span><span class="p">,</span> <span class="c1">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span>
                        <span class="na">imgUrl</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">imgUrl</span><span class="p">,</span> <span class="c1">// 分享图标</span>
                        <span class="c1">//type: '', // 分享类型,music、video或link，不填默认为link</span>
                        <span class="c1">//dataUrl: '', // 如果type是music或video，则要提供数据链接，默认为空</span>
                        <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                            <span class="c1">// 用户确认分享后执行的回调函数</span>
                        <span class="p">},</span>
                        <span class="na">cancel</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                            <span class="c1">// 用户取消分享后执行的回调函数</span>
                        <span class="p">}</span>
                    <span class="p">});</span>
                    <span class="c1">// 朋友圈</span>
                    <span class="nx">wx</span><span class="p">.</span><span class="nx">onMenuShareTimeline</span><span class="p">({</span>
                        <span class="na">title</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="c1">// 分享标题</span>
                        <span class="na">link</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">link</span><span class="p">,</span> <span class="c1">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span>
                        <span class="na">imgUrl</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">imgUrl</span><span class="p">,</span> <span class="c1">// 分享图标</span>
                        <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                            <span class="c1">// 用户确认分享后执行的回调函数</span>
                        <span class="p">},</span>
                        <span class="na">cancel</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                            <span class="c1">// 用户取消分享后执行的回调函数</span>
                        <span class="p">}</span>
                    <span class="p">});</span>
                <span class="p">});</span>
                <span class="nx">resolve</span><span class="p">(</span><span class="nx">wx</span><span class="p">);</span>
            <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">reject</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span>
            <span class="p">});</span>

        <span class="p">});</span>
    <span class="p">}</span>

    <span class="cm">/**
     * 我们的weixin_share对象将有两个方法：config和init，分别对应load_config和init_share
     */</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">config</span><span class="p">:</span> <span class="nx">load_config</span><span class="p">,</span>
        <span class="na">init</span><span class="p">:</span> <span class="nx">init_share</span>
    <span class="p">};</span>
<span class="p">});</span>
</code></pre>
</div>

<p>接下来，我们要处理上面代码中提到的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319#buzhou3">JS-SDK的权限验证配置</a>。我的建议是用后端程序写一个接口并单独部署，比如下面这个使用<a href="https://www.slimframework.com/">Slim</a>框架的PHP程序：</p>

<div class="language-php highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// Routes
</span><span class="k">use</span> <span class="nx">Psr\Http\Message\ServerRequestInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Psr\Http\Message\ResponseInterface</span><span class="p">;</span>

<span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">'/path/to/wxconfig'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ServerRequestInterface</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">ResponseInterface</span> <span class="nv">$response</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$settings</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">'settings'</span><span class="p">);</span>
    <span class="nv">$app_id</span> <span class="o">=</span> <span class="s1">'你的微信公众号开发者ID：AppID'</span><span class="p">;</span>
    <span class="nv">$app_secret</span> <span class="o">=</span> <span class="s1">'你的微信公众号开发者密码：AppSecret'</span><span class="p">;</span>
    <span class="nv">$timestamp</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
    <span class="nv">$url</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getQueryParam</span><span class="p">(</span><span class="s1">'l'</span><span class="p">);</span>
    <span class="nv">$noncestr</span> <span class="o">=</span> <span class="nb">md5</span><span class="p">(</span><span class="nb">time</span><span class="p">());</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="nv">$access_token</span> <span class="o">=</span> <span class="nx">get_wxmp_access_token</span><span class="p">(</span><span class="nv">$settings</span><span class="p">[</span><span class="s1">'datafile'</span><span class="p">][</span><span class="s1">'access_token'</span><span class="p">],</span> <span class="nv">$app_id</span><span class="p">,</span> <span class="nv">$app_secret</span><span class="p">))</span>
                <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$ticket</span> <span class="o">=</span> <span class="nx">get_wxmp_jsapi_ticket</span><span class="p">(</span><span class="nv">$settings</span><span class="p">[</span><span class="s1">'datafile'</span><span class="p">][</span><span class="s1">'jsapi_ticket'</span><span class="p">],</span> <span class="nv">$access_token</span><span class="p">)))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">withJson</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
                <span class="s1">'appId'</span><span class="o">=&gt;</span><span class="nv">$app_id</span><span class="p">,</span>
                <span class="s1">'timestamp'</span><span class="o">=&gt;</span><span class="nv">$timestamp</span><span class="p">,</span>
                <span class="s1">'nonceStr'</span><span class="o">=&gt;</span><span class="nv">$noncestr</span><span class="p">,</span>
                <span class="s1">'signature'</span><span class="o">=&gt;</span><span class="nb">sha1</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">"jsapi_ticket=%s&amp;noncestr=%s&amp;timestamp=%d&amp;url=%s"</span><span class="p">,</span> <span class="nv">$ticket</span><span class="p">,</span> <span class="nv">$noncestr</span><span class="p">,</span> <span class="nv">$timestamp</span><span class="p">,</span> <span class="nv">$url</span><span class="p">))</span>
            <span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$settings</span><span class="p">[</span><span class="s1">'displayErrorDetails'</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">withJson</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'error'</span><span class="o">=&gt;</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getCode</span><span class="p">(),</span> <span class="s1">'message'</span><span class="o">=&gt;</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span> <span class="s1">'trace'</span><span class="o">=&gt;</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getTraceAsString</span><span class="p">()));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">withJson</span><span class="p">(</span><span class="k">array</span><span class="p">());</span>
<span class="p">});</span>

<span class="sd">/**
 * 获取access_token
 * https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183
 */</span>
<span class="k">function</span> <span class="nf">get_wxmp_access_token</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">,</span> <span class="nv">$app_id</span><span class="p">,</span> <span class="nv">$app_secret</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">,</span> <span class="s1">'w+'</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$filesize</span> <span class="o">=</span> <span class="nb">filesize</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$filesize</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$token_data</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="s1">'#'</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$token_data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">time</span><span class="p">())</span> <span class="p">{</span>
                <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
                <span class="k">return</span> <span class="nv">$token_data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">((</span><span class="nv">$result</span> <span class="o">=</span> <span class="nx">curl_json</span><span class="p">(</span><span class="s2">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=</span><span class="si">{</span><span class="nv">$app_id</span><span class="si">}</span><span class="s2">&amp;secret=</span><span class="si">{</span><span class="nv">$app_secret</span><span class="si">}</span><span class="s2">"</span><span class="p">))</span>
                <span class="o">&amp;&amp;</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="s1">'access_token'</span><span class="p">],</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'expires_in'</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$access_token</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'access_token'</span><span class="p">];</span>
            <span class="nv">$expires_in</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'expires_in'</span><span class="p">];</span>
            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">'#'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$access_token</span><span class="p">,</span> <span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$expires_in</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="nv">$expires_in</span><span class="p">))));</span>
            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
            <span class="k">return</span> <span class="nv">$access_token</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="sd">/**
 * 获取jsapi_ticket
 * https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115#f11
 */</span>
<span class="k">function</span> <span class="nf">get_wxmp_jsapi_ticket</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">,</span> <span class="nv">$access_token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">,</span> <span class="s1">'w+'</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$filesize</span> <span class="o">=</span> <span class="nb">filesize</span><span class="p">(</span><span class="nv">$datafile</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$filesize</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$ticket_data</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="s1">'#'</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$ticket_data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">time</span><span class="p">())</span> <span class="p">{</span>
                <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
                <span class="k">return</span> <span class="nv">$ticket_data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">((</span><span class="nv">$result</span> <span class="o">=</span> <span class="nx">curl_json</span><span class="p">(</span><span class="s2">"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=</span><span class="si">{</span><span class="nv">$access_token</span><span class="si">}</span><span class="s2">&amp;type=jsapi"</span><span class="p">))</span>
                <span class="o">&amp;&amp;</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="s1">'ticket'</span><span class="p">],</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'expires_in'</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$ticket</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'ticket'</span><span class="p">];</span>
            <span class="nv">$expires_in</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">[</span><span class="s1">'expires_in'</span><span class="p">];</span>
            <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">'#'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$ticket</span><span class="p">,</span> <span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$expires_in</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="nv">$expires_in</span><span class="p">))));</span>
            <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
            <span class="k">return</span> <span class="nv">$ticket</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">curl_json</span><span class="p">(</span><span class="nv">$url</span><span class="p">){</span>
    <span class="nv">$ci</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
        
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_CONNECTTIMEOUT</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_TIMEOUT</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_SSL_VERIFYPEER</span><span class="p">,</span> <span class="k">FALSE</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_HEADER</span><span class="p">,</span> <span class="k">FALSE</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_POST</span><span class="p">,</span> <span class="k">FALSE</span><span class="p">);</span>
        
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ci</span><span class="p">,</span> <span class="nx">CURLINFO_HEADER_OUT</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>

    <span class="nv">$response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ci</span><span class="p">);</span>

    <span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ci</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="o">?:</span> <span class="nv">$response</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
</div>

<p>然后，我们要在页面中调用上面定义的<code class="highlighter-rouge">weixin_share</code>，其中<code class="highlighter-rouge">path/to/wxconfig</code>就是上述权限验证配置的部署路径：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
    <span class="nx">s</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">root</span><span class="p">.</span><span class="nx">weixin_share</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="s2">"/path/to/wxconfig"</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">root</span><span class="p">.</span><span class="nx">weixin_share</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
                <span class="na">title</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'meta[property="og:title"]'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'content'</span><span class="p">),</span>
                <span class="na">desc</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'meta[property="og:description"]'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'content'</span><span class="p">),</span>
                <span class="na">link</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'meta[property="og:url"]'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'content'</span><span class="p">),</span>
                <span class="na">imgUrl</span><span class="p">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'meta[property="og:image"]'</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'content'</span><span class="p">)</span>
            <span class="p">},</span> <span class="nx">c</span><span class="p">));</span>
        <span class="p">});</span>
    <span class="p">};</span>
    <span class="nx">s</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'/path/to/wxshare.js'</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"head"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span>
</code></pre>
</div>

<blockquote>
  <p>大家可能注意到了，我是从页面的meta元素中提取相关的标题、描述以及图片等信息，这样做的目的主要是尽可能小的改动博客代码。当前主流的博客系统貌似都使用了这种叫<a href="http://ogp.me/">Open Graph protocol</a>的东西。当然，如果不嫌麻烦，也可将上述提取meta的代码进行改造一番（比如，使用后端程序直接将相关信息输出到页面代码中）。</p>
</blockquote>

<p>好了，一切就绪！下面，你要确认一下，你的微信开发者接口权限了，在没有通过微信认证的情况下，上述分享功能的接口的权限都是“未获得”！而不论你是个人还是企业，这认证都是要每年花￥300元的，呵呵~</p>

	  ]]></description>
	</item>

	<item>
	  <title>在Web前端开发中使用Node和webpack</title>
	  <link>https://devylee.github.io/post/2017/06/a-sample-front-end-solution-using-webpack.html</link>
	  <author>Devy</author>
	  <pubDate>2017-06-09T09:30:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/06/a-sample-front-end-solution-using-webpack.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>标题说的很明白，本文我只介绍使用<a href="https://nodejs.org">Node</a>和<a href="https://webpack.js.org/">webpack</a>来实现的一个Web前端的构建方案，而不是一个Node实现的全栈方案。至于后端，其实我个人觉得有很多比Node更好的选择，但这不是本文的重点。</p>
</blockquote>

<!--more-->

<h2 id="写在前面">写在前面</h2>

<p>Node火了，似乎你不用Node都不好意思说自己是个全栈！但你确定要在你的项目中使用一个前后端都是JS的全栈？任何一种技术都有它值得推崇的地方，但同样也有它适合和不适的领域，所以我个人在项目的技术体系和方案选择上会综合很多因素来选择<strong class="highlight">相对适合</strong>的，从不会撕逼于各种技术社区和流派！</p>

<p>Well，你可能要问，我<strong class="highlight">选择Node+webpack做前端的理由是什么</strong>呢？好吧，我承认这是个问题，但其实，我也只是在尝试组合了几种方案之后觉得这个还蛮简单的！因为我的需求本就不复杂：</p>

<ul>
  <li>首先，我需要一个前端资源的bundler；</li>
  <li>其次，要兼容当下主流的JS模块化规范（<a href="http://www.commonjs.org/">CommonJS</a>、<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>之类）；</li>
  <li>最后，就是要有一个方便本地开发调试的服务。</li>
</ul>

<p>好啦，废话说的有点多，该放码了！</p>

<h2 id="那就开始吧">那就开始吧</h2>

<p><a href="https://nodejs.org/en/download/">Node的安装</a>我不想赘述，很容易就可以寻到针对不同系统的安装Guide，我就当你的系统里已经有Node了，至于webpack的版本，当然是2.x！首先，我们来初始化一个项目，你可以手动或者像我一样使用<code class="highlighter-rouge">npm init</code>创建一个<code class="highlighter-rouge">package.json</code>，内容大概会是这个样子：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"using-webpack"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a sample about using webpack"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<p>接下来，我们要安装几个依赖：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev webpack webpack-dev-server
</code></pre>
</div>

<p>如果你的js要用到lodash、jQuery之类，可以继续安装它们：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save lodash jquery
</code></pre>
</div>

<p>这些依赖默认都会安装到node_modules目录下，我们看下<code class="highlighter-rouge">package.json</code>，多了<code class="highlighter-rouge">devDependencies</code>和<code class="highlighter-rouge">dependencies</code>（当然你也可以手动编写<code class="highlighter-rouge">package.json</code>然后运行<code class="highlighter-rouge">npm install</code>命令来安装这些依赖）：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nt">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"webpack"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.6.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"webpack-dev-server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.4.5"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"jquery"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.2.1"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"lodash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.4"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre>
</div>

<p>下面，我们来创建一个static文件夹用来存放所有的前端资源文件（JS、CSS、图片、字体等等）和一个webpack配置文件<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'js'</span><span class="p">,</span> <span class="s1">'[name].bundle.js'</span><span class="p">),</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>我们需要一个简单的HTML文件<code class="highlighter-rouge">static/sample.html</code>：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;title&gt;</span>Sample Page<span class="nt">&lt;/title&gt;</span>

<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Sample Page<span class="nt">&lt;/h1&gt;</span>

        <span class="nt">&lt;p&gt;</span>
            This is a sample html page.
        <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/app.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre>
</div>

<p>接下来我们要在<code class="highlighter-rouge">static/js/main.js</code>里写点东西（在页面中追加“Hello World”）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'p'</span><span class="p">);</span>
    <span class="nx">hello</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">'Hello World'</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'div'</span><span class="p">).</span><span class="nx">item</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre>
</div>

<p>我们可以用<a href="https://webpack.js.org/configuration/dev-server/">webpack-dev-server</a>来启动一个开发服务，测试我们的代码，不过，在此之前，我们要来完善一下<code class="highlighter-rouge">webpack.config.js</code>，增加<code class="highlighter-rouge">devServer</code>相关的配置：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
<span class="p">...</span>
  <span class="na">devServer</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">contentBase</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'/'</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre>
</div>

<p>然后，我们就可以通过命令行<code class="highlighter-rouge">node_modules/.bin/webpack-dev-server --config ./webpack.config.js</code>来启动DevServer，默认地址是<code class="highlighter-rouge">http://localhost:8080/</code>。浏览<code class="highlighter-rouge">http://localhost:8080/sample.html</code>就可以看到效果了。</p>

<blockquote>
  <p>我们可以把上面这个命令配置在<code class="highlighter-rouge">package.json</code>的<code class="highlighter-rouge">scripts</code>中<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>，例如下面的配置，这样启动DevServer，只要执行<code class="highlighter-rouge">npm start</code>就可以了：</p>
  <div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="err">...</span><span class="w">
  </span><span class="nt">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node_modules/.bin/webpack-dev-server --config ./webpack.config.js"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="err">...</span><span class="w">
</span><span class="err">}</span><span class="w">
</span></code></pre>
  </div>
</blockquote>

<p>JS可以加载并工作了，但对于Web前端而言还远远不够，至少我们还需要个样式表！</p>

<h2 id="加载样式">加载样式</h2>

<p>样式表的加载就需要用到webpack的loaders<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>了，对于CSS的加载，我们要用到两个Loader：<a href="https://webpack.js.org/loaders/style-loader/">style-loader</a>和<a href="https://webpack.js.org/loaders/css-loader/">css-loader</a>（<em>如果你的项目用到<a href="http://lesscss.org/">LESS</a>或者<a href="http://sass-lang.com/">SASS</a>，那你还需要用到<a href="https://webpack.js.org/loaders/less-loader/">less-loader</a>或者<a href="https://webpack.js.org/loaders/sass-loader/">sass-loader</a></em>）。</p>

<p>安装相关依赖</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev style-loader css-loader
</code></pre>
</div>

<p><code class="highlighter-rouge">webpack.config.js</code>增加相关的配置</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="p">[</span> <span class="s1">'style-loader'</span><span class="p">,</span> <span class="s1">'css-loader'</span> <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>增加CSS文件<code class="highlighter-rouge">static/css/app.css</code>，定义一些样式，例如：</p>

<div class="language-css highlighter-rouge"><pre class="highlight"><code><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span>
<span class="p">}</span>

<span class="nc">.wrapper</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">80%</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">20px</span> <span class="nb">auto</span><span class="p">;</span>
    <span class="nl">min-width</span><span class="p">:</span> <span class="m">320px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>然后在<code class="highlighter-rouge">static/js/main.js</code>中要import这个CSS：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code>
<span class="kr">import</span> <span class="s1">'../css/app.css'</span><span class="p">;</span>

<span class="p">...</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">npm start</code>并访问<code class="highlighter-rouge">http://localhost:8080/sample.html</code>，是的，我们写的样式生效了，但用浏览器的开发工具看一下你就会发现，这些样式是被webpack打包到<code class="highlighter-rouge">app.bundle.js</code>然后由JS写到页面中。如果我们要把样式输出到相应的css文件，那么我们还需要做一点工作，这个时候就要用到<a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/">ExtractTextWebpackPlugin</a>。首先，我们当然要先安装这个插件：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>npm install --save-dev extract-text-webpack-plugin
</code></pre>
</div>

<p>然后，配置我们的<code class="highlighter-rouge">webpack.config.js</code>（注意css rule中的<code class="highlighter-rouge">publicPath: '../'</code>，这是根据你的项目来配置的，会影响到css文件中url()函数所引用资源的生成路径）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"extract-text-webpack-plugin"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
          <span class="na">fallback</span><span class="p">:</span> <span class="s2">"style-loader"</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="s2">"css-loader"</span><span class="p">,</span>
          <span class="na">publicPath</span><span class="p">:</span> <span class="s1">'../'</span>
        <span class="p">})</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">({</span>
      <span class="na">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'css'</span><span class="p">,</span> <span class="s1">'[name].bundle.css'</span><span class="p">)</span>
    <span class="p">}),</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>最后我们要在HTML中引入CSS：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    ...
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"css/app.bundle.css"</span> <span class="nt">/&gt;</span>
    ...
<span class="nt">&lt;/head&gt;</span>

...
</code></pre>
</div>

<p>再<code class="highlighter-rouge">npm start</code>并浏览<code class="highlighter-rouge">http://localhost:8080/sample.html</code>，嗯！Nice~</p>

<h2 id="图片资源">图片资源</h2>

<p>接下来，我们该为页面加上几张图来美化一下了，首先，还是先来安装相应的<a href="https://webpack.js.org/loaders/#files">Loaders</a>，在本例中，我就用<a href="https://webpack.js.org/loaders/file-loader/">file-loader</a>了，因为这个比较简单！执行安装命令：<code class="highlighter-rouge">npm install --save-dev file-loader</code>，然后修改<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">...</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">png|gif|jpe</span><span class="se">?</span><span class="sr">g</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader'</span><span class="p">,</span>
        <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="s1">'img/[name].[ext]'</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>现在，把要用到的图片放到<code class="highlighter-rouge">static/img</code>目录下，就可以在CSS或者HTML中引用图片了。实际的开发中可能还会遇到字体、视频等静态资源的加载，这些都可以通过配置相应的rules来实现。</p>

<p>写到这里，我们已经可以开始基本的Web前端开发工作了。但实际的项目中我们似乎才只是迈出第一步而已！</p>

<h2 id="build">Build</h2>

<blockquote>
  <p>通常项目发布的时候，我们要将前端资源打包输出，在这个过程中，通常用到的javascript和样式表会被compile或者minify。如果是用到less、sass，会被编译成css，或者用到<a href="http://coffeescript.org/">CoffeeScript</a>之类，也要被编译成javascript。</p>
</blockquote>

<p>webpack为我们提供了方便的<code class="highlighter-rouge">webpack -p</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>命令。还是之前的<code class="highlighter-rouge">webpack.config.js</code>，稍作修改，增加关于输出路径的配置，我们将发布文件输出到<code class="highlighter-rouge">dist/static/</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="nl">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">filename</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">posix</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">'js'</span><span class="p">,</span> <span class="s1">'[name].bundle.js'</span><span class="p">),</span>
    <span class="nx">path</span><span class="err">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'dist/static/'</span><span class="p">),</span>
    <span class="nx">publicPath</span><span class="err">:</span> <span class="s1">'/'</span>
  <span class="p">},</span>
  <span class="p">...</span>
</code></pre>
</div>

<p>然后执行<code class="highlighter-rouge">node_modules/.bin/webpack -p --config ./webpack.config.js</code>，当然，你也可以把这个命令配置到到<code class="highlighter-rouge">package.json</code>的<code class="highlighter-rouge">scripts</code>中：</p>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="err">...</span><span class="w">
</span><span class="s2">"scripts"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node_modules/.bin/webpack -p --config ./webpack.config.js"</span><span class="p">,</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="err">},</span><span class="w">
</span><span class="err">...</span><span class="w">
</span></code></pre>
</div>

<p>这样，我们只需要执行<code class="highlighter-rouge">npm run build</code>就可以了。</p>

<p>不过你可能会发现一个问题：css中用url()引用的图片可以正常的被输出到dist，但是html中直接引用的图片就不行。解决这个问题的一种办法是在js中声明，比如<code class="highlighter-rouge">import '../img/sample-pic.jpg'</code>或者<code class="highlighter-rouge">require('../img/sample-pic.jpg')</code>；或者使用<a href="https://webpack.js.org/loaders/html-loader/">html-loader</a>来处理引用图片的html文件，即：<code class="highlighter-rouge">npm install --save-dev html-loader</code>然后在js中<code class="highlighter-rouge">require('html-loader!../sample.html')</code>。</p>

<p>不过直接使用html-loader的一个问题是，html文件内容会被一起打包到js中，这并不是我们想要的结果。我们可以利用file-loader和extract-loader将其单独输出：</p>

<p>安装依赖：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>npm install --save-dev extract-loader
</code></pre>
</div>

<p>配置<code class="highlighter-rouge">webpack.config.js</code>：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">...</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">html</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="p">[{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'file-loader'</span><span class="p">,</span>
            <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">name</span><span class="p">:</span> <span class="s1">'[name].[ext]'</span><span class="p">,</span>
            <span class="p">},</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'extract-loader'</span><span class="p">,</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="na">loader</span><span class="p">:</span> <span class="s1">'html-loader'</span>
          <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>现在，再次<code class="highlighter-rouge">webpack -p</code>，文件已经可以正确的输出到dist了。不过因为使用了require()，所生成的js中依然会有类似<code class="highlighter-rouge">e.exports='module.exports = __webpack_public_path__ + "sample.html";'</code>这种代码。如果你像我一样对代码有着严重的洁癖，可以把相关的require()移出，比如像我把他放到<code class="highlighter-rouge">webpack.config.js</code>中另外指定了一个叫html的entry：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="p">[</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">),</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/css/app.css'</span><span class="p">)</span>
    <span class="p">],</span>
    <span class="s1">'html'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/sample.html'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>当然这还是会输出一个<code class="highlighter-rouge">html.bundle.js</code>，不过我们完全可以忽略或者删除这个文件！</p>

<h2 id="关于加载第三方库">关于加载第三方库</h2>

<p>实际项目中我们通常还会用到一些第三方的库资源，比如<a href="https://lodash.com/">lodash</a>、<a href="http://jquery.com/">jQuery</a>。只要是npm仓库中有的，都可以通过<code class="highlighter-rouge">npm install</code>来安装，并在代码中import或者require()来使用，或者通过<code class="highlighter-rouge">webpack.config.js</code>配置将这些库单独打成vendor包：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">context</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/'</span><span class="p">),</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'vendor'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'lodash'</span><span class="p">,</span> <span class="s1">'jquery'</span><span class="p">],</span>
    <span class="p">...</span>
  <span class="p">},</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>然后在HTML文件中通过script标签引用：</p>

<div class="language-html highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    ...
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"js/vendor.bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    ...

<span class="nt">&lt;/head&gt;</span>
...
</code></pre>
</div>

<p><strong class="highlight">需要注意</strong>的是有些类库的使用可能会有一些问题（不过这类问题大多通过webpack或者类库官方的文档就可以找到说明和解决的办法），比如jQuery会出现<code class="highlighter-rouge">Uncaught ReferenceError: jQuery is not defined</code>问题，这个问题是由于webpack打包和minify的过程会对js类库中的变量进行混淆，这会导致jQuery库的$和jQuery全局定义丢失，这个问题可以用<a href="https://webpack.js.org/plugins/provide-plugin/">ProvidePlugin</a>来解决，<code class="highlighter-rouge">webpack.config.js</code>配置：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"webpack"</span><span class="p">);</span>
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">...</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
      <span class="na">$</span><span class="p">:</span> <span class="s2">"jquery"</span><span class="p">,</span>
      <span class="na">jQuery</span><span class="p">:</span> <span class="s2">"jquery"</span>
    <span class="p">})</span>
    <span class="p">...</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<p>好了，现在你可以放心的在代码中使用$了。我们可以将之前写的那段测试代码改造一下试试效果：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">'.wrapper'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">'&lt;p&gt;Hello World&lt;/p&gt;'</span><span class="p">));</span>
<span class="p">})();</span>
</code></pre>
</div>

<p>嗯，看起来，没什么问题了！</p>

<p>当我们项目有多个entry points，而且又有重复引用类库的时候，你会发现类库被重复的打包在各个js中！这一点webpack也为我们想到了，就是<a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a>插件，使用也并不复杂，就是在<code class="highlighter-rouge">webpack.config.js</code>中增加配置，在本例中可以这样：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"webpack"</span><span class="p">);</span>
<span class="p">...</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'vendor'</span><span class="p">:</span> <span class="p">[</span><span class="s1">'jquery'</span><span class="p">],</span>
    <span class="s1">'app'</span><span class="p">:</span> <span class="p">[</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/js/main.js'</span><span class="p">),</span>
      <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'static/css/app.css'</span><span class="p">)</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="p">...</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">...</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
      <span class="na">name</span><span class="p">:</span> <span class="s2">"vendor"</span><span class="p">,</span>
      <span class="na">minChunks</span><span class="p">:</span> <span class="kc">Infinity</span><span class="p">,</span>
    <span class="p">})</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<h2 id="最后">最后</h2>

<p>好了，这个sample算是写完了，完整的代码放在Github上，需要的同学可以<a href="https://github.com/devylee/using-webpack">戳这里</a>。欢迎交流！</p>

<hr />

<p><em>参考：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://docs.npmjs.com/cli/run-script">npm-run-script : Run arbitrary package scripts</a>; <a href="https://docs.npmjs.com/misc/scripts">npm-scripts : How npm handles the "scripts" field</a>&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://webpack.js.org/concepts/loaders/">Webpack Loaders</a>&nbsp;<a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://webpack.js.org/guides/production-build/">Building for Production</a>&nbsp;<a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>用Nginx镜像远程站点并替换HTML</title>
	  <link>https://devylee.github.io/post/2017/04/mirror-a-remote-site-and-replace-html-content-using-nginx.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-21T09:30:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/04/mirror-a-remote-site-and-replace-html-content-using-nginx.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>Nginx可以做很多事，除了我们最常用的做Web服务器和反向代理，它其实还可以让我们做很多的“小动作”，比如本文要介绍的镜像一个站点、替换HTTP的响应内容。</p>
</blockquote>

<!--more-->

<p><strong>来，容我先描述一下需求：</strong> <a href="http://devylee.github.io">devylee.github.io</a>是我的Github Page；<a href="http://devylee.me">devylee.me</a>是我的一个域名，而且经过一系列的波折，在<a href="http://sinacloud.com/">新浪云</a>终于通过了工信部的备案，可以在国内用了。so，那就不要让这个域名闲着了，但我又并不想直接把这域名绑定在我的Github Page上（GH上只能绑定一个独立域名，而且不支持HTTPS），所以，我就用SAE部署一个Docker容器并绑定<a href="http://devylee.me">devylee.me</a>这个域名，然后用Nginx把请求都proxy到<a href="http://devylee.github.io">devylee.github.io</a>，顺便在返回的HTML页面中注入备案号。</p>

<p>需求很简单吧，来，让我们撸起袖子干吧！</p>

<p>首先上Dockerfile（SAE上如何部署Dockerfile可以参考我之前的文章“<a href="/post/2017/04/docker-a-ghost-blog-by-sae.html">用SAE Docker一个Ghost博客</a>”）：</p>

<blockquote>
  <p>我这里监听的端口是5050，这个要看你的SAE应用中环境变量<code class="highlighter-rouge">PORT</code>的具体值。</p>
</blockquote>

<pre class="highlight"><code class="language-docker">FROM nginx:alpine

COPY nginx-default.conf /etc/nginx/conf.d/default.conf

EXPOSE 5050

</code></pre>

<p>nginx-default.conf：</p>

<div class="language-nginx highlighter-rouge"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">5050</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://devylee.github.io</span><span class="p">;</span>
        <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>

        <span class="kn">sub_filter</span> <span class="s">'All</span> <span class="s">Rights</span> <span class="s">Reserved.'</span> <span class="s">'All</span> <span class="s">Rights</span> <span class="s">Reserved.</span> <span class="s">&lt;a</span> <span class="s">href="http://www.miitbeian.gov.cn"&gt;辽ICP备16011865号&lt;/a&gt;'</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre>
</div>

<p>如此，push并确认成功后，在浏览器输入devylee.me，哦，没错，这就是我的Github Page！不过，备案号呢？貌似sub_filter并未起作用啊！</p>

<p>经过各种尝试（甚至是更换镜像源，从头编译nginx，然并卵！），最终找到原因原来是因为<code class="highlighter-rouge">Accept-Encoding</code>！</p>

<p>怎么回事？因为现在几乎所有的Web服务器都支持gzip压缩的，也就是<code class="highlighter-rouge">Accept-Encoding: gzip</code>，而且默认情况下就是启用的，当然Github Page也不例外！于是乎，我们的Nginx
通过proxy_pass得到的响应内容其实是被gzip过的，所以，sub_filter就根本不起作用！找到问题所在，接下来就简单了，我们只要对nginx-default.conf稍加改造（增加一行<code class="highlighter-rouge">proxy_set_header Accept-Encoding ""</code>）就可以了：</p>

<div class="language-nginx highlighter-rouge"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">5050</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://devylee.github.io</span><span class="p">;</span>
        <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Accept-Encoding</span> <span class="s">""</span><span class="p">;</span>

        <span class="kn">sub_filter</span> <span class="s">'All</span> <span class="s">Rights</span> <span class="s">Reserved.'</span> <span class="s">'All</span> <span class="s">Rights</span> <span class="s">Reserved.</span> <span class="s">&lt;a</span> <span class="s">href="http://www.miitbeian.gov.cn"&gt;辽ICP备16011865号&lt;/a&gt;'</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre>
</div>

<p>OK！再次push，刷新浏览器~</p>

<p>嗯！有没有觉得so easy啊！</p>

<hr />

<p><em>参考：</em></p>

<ol>
  <li><a href="http://nginx.org/en/docs/http/ngx_http_sub_module.html">Nginx <code class="highlighter-rouge">ngx_http_sub_module</code> Module</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Mac下Docker的使用</title>
	  <link>https://devylee.github.io/post/2017/04/using-docker-on-macos.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-17T14:00:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/04/using-docker-on-macos.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>自从接触了<a href="https://www.docker.com/">Docker</a>，我就深深的觉得：<strong>Docker的使用应该是一个开发人员，尤其是基于Linux的Web服务端开发人员应该具备的基本技能之一！</strong>其实Docker的使用也并不复杂，熟悉两个命令<code class="highlighter-rouge">docker</code>、<code class="highlighter-rouge">docker-machine</code>和一个<code class="highlighter-rouge">Dockerfile</code>就可以在你的本机开发环境中跑起来了。</p>
</blockquote>

<!--more-->

<p>Docker最具价值的功能在于它可以实现将应用部署完全的程序化，由此，我们创建一个主机、部署一个应用不再需要重复的人工操作，基于它背后庞大的镜像社区<a href="https://hub.docker.com/">Docker Hub</a>，一行命令就可以搞定一台虚拟机，一个Dockerfile就可以部署一个应用……这样不但提高了部署效率也大大降低人工操作的出错风险。更重要的是，这也让更多自动化的需求成为可能，比如：在系统负载过高时自动部署应用镜像来均衡负载，提高系统稳定性！</p>

<h2 id="安装">安装</h2>

<p>我是一个忠实的Mac用户，在Mac下安装使用Docker也不止一种途径，比如官方提供的：<a href="https://www.docker.com/docker-mac">Docker for Mac</a>和<a href="https://www.docker.com/products/docker-toolbox">Docker Toolbox</a>。</p>
<blockquote>
  <p>如果你的系统版本够高，我其实更推荐使用Docker for Mac，因为Docker Toolbox需要另外安装<a href="https://www.virtualbox.org/">VirtualBox</a>。</p>
</blockquote>

<p>我是个<a href="https://www.macports.org/">MacPorts</a>的重度用户，在电脑的使用上还有严重的洁癖！所以我的Docker环境是用MacPorts维护的（当然你也可以选择<a href="https://brew.sh/">homebrew</a>）。其实这差不多就是在用Docker Toolbox了，也就是说，你还是要有VirtuaBox或者<a href="http://www.vmware.com/products/fusion.html">VMWare Fusion</a>。不多说了，还是放码吧，安装：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>sudo port install docker docker-machine docker-compose
</code></pre>
</div>

<h2 id="docker-machine">docker-machine</h2>

<blockquote>
  <p>要运行docker，首先得有可用的Docker Machine，本地环境中的Machine可以由<code class="highlighter-rouge">docker-machine</code>命令来维护。</p>
</blockquote>

<p>先来ls一下：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker-machine ls
NAME      ACTIVE   DRIVER         STATE     URL   SWARM   DOCKER    ERRORS
</code></pre>
</div>

<p>没有machine，所以还是要自己动手先来创建，其实就是一个VirtualBox或者VMWare Fusion驱动的VM，命令如下：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker-machine create --driver virtualbox default
</code></pre>
</div>

<p>再ls：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker-machine ls
NAME      ACTIVE   DRIVER         STATE     URL   SWARM   DOCKER    ERRORS
default   -        virtualbox     Stopped                 Unknown 
</code></pre>
</div>

<p>OK有了，来启动这个machine：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker-machine start default
Starting <span class="s2">"default"</span>...
Machine <span class="s2">"default"</span> was started.
Waiting <span class="k">for </span>SSH to be available...
Detecting the provisioner...
Started machines may have new IP addresses. You may need to re-run the <span class="sb">`</span>docker-machine env<span class="sb">`</span> command.

<span class="gp">$ </span>docker-machine env default
<span class="nb">export </span><span class="nv">DOCKER_TLS_VERIFY</span><span class="o">=</span><span class="s2">"1"</span>
<span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span><span class="s2">"tcp://192.168.85.135:2376"</span>
<span class="nb">export </span><span class="nv">DOCKER_CERT_PATH</span><span class="o">=</span><span class="s2">"/Users/yourname/.docker/machine/machines/default"</span>
<span class="nb">export </span><span class="nv">DOCKER_MACHINE_NAME</span><span class="o">=</span><span class="s2">"default"</span>
<span class="c"># Run this command to configure your shell: </span>
<span class="c"># eval $(docker-machine env)</span>

<span class="gp">$ </span><span class="nb">eval</span> <span class="s2">"</span><span class="k">$(</span>docker-machine env default<span class="k">)</span><span class="s2">"</span>

</code></pre>
</div>

<p>好了，我们的Docker Machine算是启动了，如果要ssh连接到这个主机，需要用<code class="highlighter-rouge">docker-machine ssh default</code>。</p>

<blockquote>
  <p>在Docker主机中如果要切换su，执行<code class="highlighter-rouge">sudo -i</code>就可以了。</p>
</blockquote>

<p><em>常用的docker-machine命令：</em></p>

<ul>
  <li><code class="highlighter-rouge">docker-machine create</code>  创建</li>
  <li><code class="highlighter-rouge">docker-machine start</code> 启动</li>
  <li><code class="highlighter-rouge">docker-machine stop</code> 停止</li>
  <li><code class="highlighter-rouge">docker-machine env</code> 查看环境参数</li>
  <li><code class="highlighter-rouge">docker-machine ip</code> 查看IP</li>
  <li><code class="highlighter-rouge">docker-machine ssh</code> ssh连接</li>
  <li><code class="highlighter-rouge">docker-machine ls</code> machines 列表</li>
</ul>

<h2 id="docker">docker</h2>

<p>下面该<code class="highlighter-rouge">docker</code>登场了！<code class="highlighter-rouge">docker info</code>可以查看当前接入的Docker Machine的信息，我们先来run一个mysql试试：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker run --name mysql -p 3306:3306 -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>mysqlpwd -d mysql
</code></pre>
</div>

<p>这个命令会创建一个运行mysql的容器，容器的3306端口（也就是mysql的服务端口）会被映射到docker主机的3306端口，mysql的root用户密码是<code class="highlighter-rouge">MYSQL_ROOT_PASSWORD</code>指定的<code class="highlighter-rouge">mysqlpwd</code>。我们可以用下面的命令连接这个mysql服务看看：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>mysql 192.168.85.135 -u root -p
</code></pre>
</div>

<p>可以了吧，好了，关于run命令的更多信息可以<code class="highlighter-rouge">docker run --help</code>查阅。如果要停止上面那个容器可以用<code class="highlighter-rouge">docker stop mysql</code>。run过之后，这个容器（Container）和镜像（Image）都已经保存在本地了，下次再运行这个容器可以直接运行<code class="highlighter-rouge">docker start mysql</code>而不需要再<code class="highlighter-rouge">docker run</code>了。</p>

<p><em>常用的docker命令：</em></p>

<ul>
  <li><code class="highlighter-rouge">docker build</code> 通过Dockerfile构建镜像</li>
  <li><code class="highlighter-rouge">docker run</code> 运行容器</li>
  <li><code class="highlighter-rouge">docker ps</code> 显示当前运行的容器（加<code class="highlighter-rouge">-a</code>参数可以列出本地所有容器，包括未运行的容器）</li>
  <li><code class="highlighter-rouge">docker start</code> 启动容器</li>
  <li><code class="highlighter-rouge">docker stop</code> 停止容器</li>
  <li><code class="highlighter-rouge">docker rm</code> 删除容器</li>
  <li><code class="highlighter-rouge">docker rmi</code> 删除镜像</li>
</ul>

<h2 id="dockerfile--docker-build">Dockerfile &amp; <code class="highlighter-rouge">docker build</code></h2>

<blockquote>
  <p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>文件用于声明自动构建镜像的一系列命令，<code class="highlighter-rouge">docker build</code>使用这个文件来构建镜像。<em>在我之前的文章“<a href="/post/2017/04/docker-a-ghost-blog-by-sae.html">用SAE Docker一个Ghost博客</a>”中，我就是用Dockerfile来构建的<a href="https://ghost.org">Ghost</a>应用。</em></p>
</blockquote>

<p>当你编写好了Dockerfile之后，你就可以使用<code class="highlighter-rouge">docker build</code>命令了：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span><span class="nb">cd</span> /path/to/workdir/
<span class="gp">$ </span>docker build .
</code></pre>
</div>

<p>我们也可以在build的时候为镜像命名，另外，在build的时候，docker还会为每一个步骤（命令）生成缓存，我们可以加<code class="highlighter-rouge">--no-cache</code>参数取消缓存，如下：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker build -t image_name --no-cache .
</code></pre>
</div>

<p>build成功后，执行<code class="highlighter-rouge">docker images</code>就可以看到本地的镜像列表，如果是第一次执行可以用<code class="highlighter-rouge">docker run</code>，如果已经作为容器运行了（<code class="highlighter-rouge">docker ps -a</code>查看）则可以用<code class="highlighter-rouge">docker start</code>来启动容器。另外<code class="highlighter-rouge">docker run</code>时也可以指定环境变量，例如：我在“<a href="/post/2017/04/docker-a-ghost-blog-by-sae.html">用SAE Docker一个Ghost博客</a>”中的Dockerfile，因为用到了SAE的环境变量，所以，在本地测试环境中，我就把本地环境配置放到一个名为env-dev.list的文件中，内容类似这样：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>MYSQL_HOST=192.168.85.135
MYSQL_PORT=3306
ACCESSKEY=ghost
SECRETKEY=ghost
APPNAME=ghost
GHOST_URL=http://192.168.85.135:7000/
PORT=2467
</code></pre>
</div>

<p>然后<code class="highlighter-rouge">docker run</code>：</p>

<div class="language-shell highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>docker run --name ghost -p 7000:2467 --env-file<span class="o">=</span>./env-dev.list -v /var/storage/ghost:/var/storage/ghost ghost_image
</code></pre>
</div>

<p>这条命令使用ghost_image镜像启动容器并将容器的2467端口映射到主机的7000端口，同时将主机的<code class="highlighter-rouge">/var/storage/ghost</code>目录挂载到容器的<code class="highlighter-rouge">/var/storage/ghost</code>。</p>

<p>没什么问题的话，我们就可以通过在浏览器输入<code class="highlighter-rouge">http://192.168.85.135:7000/</code>来访问这个Ghost应用了。</p>

<hr />

<p><em>参考：</em></p>

<ol>
  <li><a href="https://docs.docker.com/docker-for-mac/">Get started with Docker for Mac</a></li>
  <li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a></li>
  <li><a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">Best practices for writing Dockerfiles</a></li>
  <li><a href="https://www.viget.com/articles/how-to-use-docker-on-os-x-the-missing-guide">How to Use Docker on OS X: The Missing Guide</a></li>
  <li><a href="https://blog.tutum.co/2014/10/22/how-to-optimize-your-dockerfile/">How to Optimize Your Dockerfile</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>用Javascript检测跨域资源(CORS)的可用性</title>
	  <link>https://devylee.github.io/post/2017/04/cors-reachability-detect-in-javascript.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-10T15:30:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/04/cors-reachability-detect-in-javascript.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>我相信和国外的程序猿比起来，国内的同行们至少要比他们多了解一个概念，那就是“翻墙”！其实这项技术本身而言，也并没有多复杂，尤其现在的工具也简单易用了很多，但在翻的过程中，还是会激发我们很多的idea，比如本文要说的，用js检测CORS资源的可用性。</p>
</blockquote>

<!--more-->

<p>其实我之所以会冒出这个想法，也是源于我的自身需求，因为要在博客中集成<a href="https://disqus.com">Disqus</a>评论。但是正如你所知，Disqus在国内是被墙的，这样会导致一个问题，就是页面加载后，因为Disqus的资源（js）始终加载不进来，浏览器就始终在那里loading…，虽然不影响页面内容的阅读，但我是无法接受的！所以我的需求很简单：<strong>要在页面加载后检测Disqus的资源是否能够加载，如果不能，那就停止对这些资源的请求。</strong></p>

<blockquote>
  <p>是的，在国内不翻墙的情况下，你是看不到我博客有评论功能的！</p>
</blockquote>

<p>先来看看Disqus官方提供的通用集成代码：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code>    <span class="cm">/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
    */</span>
    <span class="kd">var</span> <span class="nx">disqus_config</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">PAGE_URL</span><span class="p">;</span>  <span class="c1">// Replace PAGE_URL with your page's canonical URL variable</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">identifier</span> <span class="o">=</span> <span class="nx">PAGE_IDENTIFIER</span><span class="p">;</span> <span class="c1">// Replace PAGE_IDENTIFIER with your page's unique identifier variable</span>
    <span class="p">};</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">// DON'T EDIT BELOW THIS LINE</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>

        <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>

        <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
        <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>其实很简单，就是在页面中加载<code class="highlighter-rouge">//EXAMPLE.disqus.com/embed.js</code>这个js文件，所以，我只要判断这个js是否可以访问。我第一个想到了<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>，我只要向这个资源发一个HEAD请求，然后判断状态码就可以知道这个资源是否可用。于是，第一个方案诞生：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span> <span class="o">||</span> <span class="nx">XMLHttpRequest</span> <span class="p">)(</span> <span class="s1">'Microsoft.XMLHTTP'</span> <span class="p">);</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'HEAD'</span><span class="p">,</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js?data-timestamp='</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> 
                <span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">301</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">302</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">304</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">307</span><span class="p">))</span> <span class="p">{</span>
            <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// REQUIRED CONFIGURATION VARIABLE: EDIT THE SHORTNAME BELOW</span>
                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                
                <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                
                <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
            <span class="p">})();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre>
</div>

<p>事实证明，很多事情并没有我们想的那么简单，这个方案遇到了CORS的安全策略限制，提示：<code class="highlighter-rouge">XMLHttpRequest has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</code> <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> 这个问题的解决办法有两种：</p>
<ol>
  <li>Disqus在response的header中提供<code class="highlighter-rouge">Access-Control-Allow-Origin： *</code>；</li>
  <li>换一种方案！</li>
</ol>

<p>想来要Disqus在header中加入Access-Control-Allow-Origin也并非是件容易的事，所以还是自己动手丰衣足食吧！Google了一通，得知jQuery的ajax方法，在<code class="highlighter-rouge">dataType</code>是<code class="highlighter-rouge">jsonp</code>或者<code class="highlighter-rouge">script</code>的时候，不会有这个Access-Control-Allow-Origin的问题，于是，我的第二个方案诞生了：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'DOMContentLoaded'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                <span class="na">url</span><span class="p">:</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">,</span> <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                <span class="na">dataType</span><span class="p">:</span> <span class="s1">'script'</span><span class="p">,</span> <span class="c1">// jsonp 会有parseerror</span>
                <span class="na">jsonp</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="na">timeout</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
                <span class="na">error</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">xhr</span><span class="p">.</span><span class="nx">abort</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
                <span class="p">},</span>
                <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                    <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                    <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                    <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>这个方案成功绕开了CORS的安全策略问题，但新的问题又来了：即使是timeout了，ajax请求也无法被abort，浏览器还会在不停的loading…！分析原因：jQuery的ajax其实也是对XMLHttpRequest的封装，但貌似<code class="highlighter-rouge">dataType</code>在<code class="highlighter-rouge">jsonp</code>或<code class="highlighter-rouge">script</code>的情况下并不是走的XMLHttpRequest，而是通过向页面吐script标签来实现，也正因此，才不会受CORS策略的限制。</p>

<p>所以，看来还是要自己借助页面script或者img标签的加载来实现。不过，历史证明：<strong>大多数的轮子人家已经造好了的！</strong>这不，我就找到了这个<a href="https://github.com/jdfreder/pingjs">pingjs</a>。不过，pingjs也不会在超时后停止对资源的请求，所以我们要对这个js做点hack，第43行，在timeout时将img.src置空，如下：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span> <span class="nx">img</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="nx">reject</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s1">'Timeout'</span><span class="p">));</span> <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>

<span class="p">...</span>

</code></pre>
</div>

<p>如此，我的最终方案就变成这样：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'DOMContentLoaded'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">ping</span><span class="p">(</span><span class="s1">'https://EXAMPLE.disqus.com/count.js'</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">delta</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>问题解决！不知道大家注意到没有，我ping的是<code class="highlighter-rouge">https://EXAMPLE.disqus.com/count.js</code>而不是<code class="highlighter-rouge">//EXAMPLE.disqus.com/embed.js</code>。其实原因很简单，count.js(1.5k)要远远小于embed.js(18k)！直接使用https也是因为这样省去了远端的redirect。</p>

<p><em>** 其实，我还试过另外一种不奏效的方案：</em></p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">),</span>
            <span class="nx">t</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span> <span class="c1">// 定义一个定时器用于在超时后移除这个script</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">s</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="p">};</span> <span class="c1">// 成功加载后移除定时器</span>
        <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
    <span class="p">})();</span>

</code></pre>
</div>

<p>貌似<code class="highlighter-rouge">&lt;script /&gt;</code>只要append就无法停止加载（直到努力加载到无能为力），也许正是因此，上述的第二种ajax检测方案在timeout时abort操作会不起作用吧。</p>

<hr />

<p><em>注：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS访问控制</a>&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>用SAE Docker一个Ghost博客</title>
	  <link>https://devylee.github.io/post/2017/04/docker-a-ghost-blog-by-sae.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-06T09:00:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/04/docker-a-ghost-blog-by-sae.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>其实这是之前在SAE部署Ghost之后写下的，迁移至此仅供参考，只是我已改投<a href="https://jekyllrb.com">Jekyll</a>和<a href="https://pages.github.com/">Github Pages</a>。</p>
</blockquote>

<!--more-->

<p>首先我们先来认识一下本文即将出场的几位主角（其实它们都在标题里了）：</p>

<ul>
  <li><a href="https://ghost.org/">Ghost</a>：基于NodeJS的开源博客系统</li>
  <li><a href="https://www.docker.com/">Docker</a>：应该是时下最流行的容器技术了吧，我们要基于它来构建Ghost服务</li>
  <li><a href="http://www.sinacloud.com/sae.html">SAE</a>：新浪云的云应用，也就是我们要用新浪云的云应用服务来运行我们的博客</li>
</ul>

<blockquote>
  <p>新浪云的<a href="http://sae.sina.com.cn/?m=appmarket&amp;a=index">云市场</a>里是有Ghost镜像的，你完全可以点击几下鼠标就可以用它来很轻松的部署一个Ghost实例，但对于我这种喜欢自己鼓捣的人来说，当然是不愿意在这方面节省时间的。</p>
</blockquote>

<p>好了，言归正传！</p>

<h3 id="第1步-创建云应用sae">第1步 创建云应用SAE</h3>

<p>盖房子要先买地的，所以，首先我们要申请一个SAE（当然你要先保证自己的账户中有足够的云豆，其实就是充值啦）：进入云应用SAE控制台，在<em>“应用管理”</em>中点击<em>“+创建新应用”</em>，然后就会进入如下应用创建页面</p>

<p><img src="/uploads/2017/04/create-sae.png" alt="创建云应用" /></p>

<blockquote>
  <p>开发语言选<em>“自定义”</em>，部署环境选<em>“Dockerfile”</em>，环境配置和实例个数我建议先选1个基础配置就可以了，这个配置可以在部署成功以后随时根据实际需求来调整的，当然越多越高的配置也相应会有更多的支出。</p>
</blockquote>

<p>云应用创建成功，进入云应用管理，接下来我们要申请数据库和存储，虽然容器有5G的空间，你完全可以使用sqlite作为数据库，把内容数据和文件都保存在这个容器中，但问题是，只要你更新Dockerfile，容器就会重新构建，你的数据也就没了！所以就不要吝啬这点投入了，在<em>“数据库与缓存服务”</em>中，创建一个<em>“共享型MySQL”</em>，当然，够豪的话，你也可以创建独享型MySQL；在<em>“存储与CDN服务”</em>中新建一个<em>“共享存储”</em>，容量视个人需求而定吧，反正也是随时可以调整的。这个存储在后续的步骤中是要挂载到容器上的。</p>

<h3 id="第2步-编写dockerfile">第2步 编写Dockerfile</h3>

<blockquote>
  <p>考验你的时刻到了，这里你要用到Git、Dockerfile、nodejs、bash等等相关知识</p>
</blockquote>

<p>首先我们要git迁出代码，在SAE控制台的“应用”»“代码管理”中，可以看到你的Git仓库及代码部署说明，可以参照他的sample来操作，也可以clone迁出，当然不管哪种方式，你看到的是一个空仓库，我们要自己来创建必要的Dockerfile文件、ENTRYPOINT文件和Ghost的config.js配置文件。</p>

<blockquote>
  <p>其实<a href="https://hub.docker.com/">Docker Hub</a>中也有Ghost官方提供的镜像的(<a href="https://hub.docker.com/_/ghost/">点这里</a>)，你可以参考他的Dockerfile，我并没有试过这个镜像是否可以直接在SAE上运行</p>
</blockquote>

<p>我的Dockerfile大概是下面这样的（<em>GHOST_CONTENT参考注<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></em>）：</p>

<pre class="highlight"><code class="language-docker">FROM node:4-slim

ENV GHOST_SOURCE=/var/www/ghost 
# 参考注1.
ENV GHOST_CONTENT=/path/to/your/content
ENV NODE_ENV=production
ENV GOSU_VERSION=1.10 
ENV GHOST_VERSION=0.11.5

VOLUME $GHOST_CONTENT

RUN set -x \
    &amp;&amp; apt-get update \
    &amp;&amp; apt-get install -y curl unzip rsync ca-certificates --no-install-recommends \
    &amp;&amp; rm -rf /var/lib/apt/lists/* \
	&amp;&amp; curl -L "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  -o /usr/local/bin/gosu \
	&amp;&amp; curl -L "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc" -o /usr/local/bin/gosu.asc \
	&amp;&amp; export GNUPGHOME="$(mktemp -d)" \
	&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&amp;&amp; rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
	&amp;&amp; chmod +x /usr/local/bin/gosu \
	&amp;&amp; gosu nobody true \
    &amp;&amp; mkdir -p "$GHOST_SOURCE" \
    &amp;&amp; curl -L "https://github.com/TryGhost/Ghost/releases/download/$GHOST_VERSION/Ghost-$GHOST_VERSION.zip" -o /var/www/ghost.zip \
    &amp;&amp; unzip -uo /var/www/ghost.zip -d "$GHOST_SOURCE" \
    &amp;&amp; rm -f /var/www/ghost.zip \
    &amp;&amp; cd "$GHOST_SOURCE" \
    &amp;&amp; npm install -g npm@latest \
    &amp;&amp; npm install --production \
    &amp;&amp; npm cache clean \
    &amp;&amp; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false curl unzip ca-certificates \
    &amp;&amp; rm -rf /tmp/* \
    &amp;&amp; groupadd ghost \
    &amp;&amp; useradd --create-home --home-dir /home/ghost -g ghost ghost \
    &amp;&amp; chown -R ghost:ghost "$GHOST_CONTENT"

WORKDIR $GHOST_SOURCE

COPY ghost-config.js "$GHOST_SOURCE/config.js"

COPY docker-entrypoint.sh /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]

CMD ["npm", "start"]
</code></pre>

<p>docker-entrypoint.sh是这个样子：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> -e

rsync -r <span class="s2">"</span><span class="nv">$GHOST_SOURCE</span><span class="s2">/content/"</span> <span class="s2">"</span><span class="nv">$GHOST_CONTENT</span><span class="s2">/"</span>

<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$*</span><span class="s2">"</span> <span class="o">==</span> npm<span class="k">*</span>start<span class="k">*</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="k">$(</span>id -u<span class="k">)</span><span class="s2">"</span> <span class="o">=</span> <span class="s1">'0'</span> <span class="o">]</span>; <span class="k">then
	</span>chown -R ghost:ghost <span class="s2">"</span><span class="nv">$GHOST_CONTENT</span><span class="s2">"</span>
    <span class="nb">exec </span>gosu ghost <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre>
</div>

<p>ghost-config.js大概是这个样子（<em>url配置参考注<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></em>）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">),</span>
    <span class="nx">config</span><span class="p">;</span>

<span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">production</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'http://yourdomain.com/'</span><span class="p">,</span> <span class="c1">// 参考注2</span>
        <span class="na">mail</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">database</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">client</span><span class="p">:</span> <span class="s2">"mysql"</span><span class="p">,</span>
            <span class="na">connection</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_HOST</span><span class="p">,</span>
                <span class="na">port</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_PORT</span><span class="p">,</span>
                <span class="na">user</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ACCESSKEY</span><span class="p">,</span>
                <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SECRETKEY</span><span class="p">,</span>
                <span class="na">database</span><span class="p">:</span> <span class="s1">'app_'</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">APPNAME</span><span class="p">,</span>
                <span class="na">charset</span><span class="p">:</span> <span class="s2">"utf8"</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">contentPath</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GHOST_CONTENT</span><span class="p">,</span> <span class="s1">'/'</span><span class="p">)</span>
        <span class="p">},</span>
        <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="s1">'0.0.0.0'</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<h3 id="第3步-构建你的ghost">第3步 构建你的Ghost</h3>

<p>其实这一步就是git comit &amp; push你的代码，然后你就静待花开吧，如果一切顺利，在push收到成功的信息后，你的blog就在那里了。</p>

<p>哦，别忘了把你的<em>“共享存储”</em>挂载到Dockerfile中$GHOST_CONTENT所指定的路径上并重启你的容器。</p>

<p>Enjoy!</p>

<blockquote>
  <p><strong>后记 2017-04-17</strong></p>

  <p>已经整理了示例代码项目上传到Github，可以<a href="https://github.com/devylee/ghost-sae">戳这里</a>！</p>
</blockquote>

<hr />

<p><em>注：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>GHOST_CONTENT 就是你在第1步中申请的“共享存储”的挂载路径&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>这是你博客的网址，你可以用SAE的二级网址，比如这样：<code class="language-json highlighter-rouge"><span class="err">url:</span><span class="w"> </span><span class="err">'http://'</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">process.env.APPNAME</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">'.applinzi.com/'</span></code>；或者像我，先在SAE控制台的“应用”&gt;“环境变量”中添加一个环境变量，例如：SITEURL，值为：”http://yourdomain.com/”，然后你的配置就可以这样写： <code class="language-json highlighter-rouge"><span class="err">url:</span><span class="w"> </span><span class="err">process.env.SITEURL</span></code> 。&nbsp;<a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>Welcome to my pages</title>
	  <link>https://devylee.github.io/post/2017/04/welcome-to-my-pages.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-05T17:30:00+08:00</pubDate>
	  <guid>https://devylee.github.io/post/2017/04/welcome-to-my-pages.html</guid>
	  <description><![CDATA[
	     <p>欢迎来到我的Github Page，当然这也将被用作我的个人博客。</p>

<p>我不是一个高产的写作者，只是年纪大了，很多东西总是会记不起，所以这可能就是我用来记录这些记忆碎片的地方。</p>

<!--more-->

<p>其实在此之前，我还用过Blogger、Baidu空间、SAE，无奈这些服务要么被墙、要么死掉、要么被死死监管，最终落脚在此，希望会是个好的归宿吧。</p>

<p>我也想是不是要把之前那些po再贴过来，但是想想最后还是放弃了，有些东西丢了其实真的没必要再捡回来，尤其是这日新月异信息爆炸的时代！</p>

<p>我们还是来开启新篇章吧~</p>

	  ]]></description>
	</item>


</channel>
</rss>
