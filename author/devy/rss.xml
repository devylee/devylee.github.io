<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title></title>
   <link></link>
   <description>一个辅助记忆的树洞</description>
   <language>zh-cn</language>
   <managingEditor> Devy</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>用Javascript检测跨站资源(CORS)的可用性</title>
	  <link>//2017/04/cors-reachability-detect-in-javascript.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-10T15:30:00+08:00</pubDate>
	  <guid>//2017/04/cors-reachability-detect-in-javascript.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>我相信和国外的程序猿比起来，国内的同行们至少要比他们多了解一个概念，那就是“翻墙”！其实这项技术本身而言，也并没有多复杂，尤其现在的工具也简单易用了很多，但在翻的过程中，还是会激发我们很多的idea，比如本文要说的，用js检测CORS资源的可用性。
<!--more--></p>
</blockquote>

<p>其实我之所以会冒出这个想法，也是源于我的自身需求，因为要在博客中集成<a href="https://disqus.com">Disqus</a>评论。但是正如你所知，Disqus在国内是被墙的，这样会导致一个问题，就是页面加载后，因为Disqus的资源（js）始终加载不进来，浏览器就始终在那里loading…，虽然不影响页面内容的阅读，但我是无法接受的！所以我的需求很简单：<strong>要在页面加载后检测Disqus的资源是否能够加载，如果不能，那就停止对这些资源的请求。</strong></p>
<blockquote>
  <p>是的，在国内不翻墙的情况下，你是看不到我博客有评论功能的！</p>
</blockquote>

<p>先来看看Disqus官方提供的通用集成代码：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code>    <span class="cm">/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
    */</span>
    <span class="kd">var</span> <span class="nx">disqus_config</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">PAGE_URL</span><span class="p">;</span>  <span class="c1">// Replace PAGE_URL with your page's canonical URL variable</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">identifier</span> <span class="o">=</span> <span class="nx">PAGE_IDENTIFIER</span><span class="p">;</span> <span class="c1">// Replace PAGE_IDENTIFIER with your page's unique identifier variable</span>
    <span class="p">};</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">// DON'T EDIT BELOW THIS LINE</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>

        <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>

        <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
        <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>其实很简单，就是在页面中加载<code class="highlighter-rouge">//EXAMPLE.disqus.com/embed.js</code>这个js文件，所以，我只要判断这个js是否可以访问。我第一个想到了<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>，我只要向这个资源发一个HEAD请求，然后判断状态码就可以知道这个资源是否可用。于是，第一个方案诞生：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span> <span class="o">||</span> <span class="nx">XMLHttpRequest</span> <span class="p">)(</span> <span class="s1">'Microsoft.XMLHTTP'</span> <span class="p">);</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'HEAD'</span><span class="p">,</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js?data-timestamp='</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> 
                <span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">301</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">302</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">304</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">307</span><span class="p">))</span> <span class="p">{</span>
            <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// REQUIRED CONFIGURATION VARIABLE: EDIT THE SHORTNAME BELOW</span>
                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                
                <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                
                <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
            <span class="p">})();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre>
</div>

<p>事实证明，很多事情并没有我们想的那么简单，这个方案遇到了CORS的安全策略限制，提示：<code class="highlighter-rouge">XMLHttpRequest has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</code> <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> 这个问题的解决办法有两种：</p>
<ol>
  <li>Disqus在response的header中提供<code class="highlighter-rouge">Access-Control-Allow-Origin： *</code>；</li>
  <li>换一种方案！</li>
</ol>

<p>想来要Disqus在header中加入Access-Control-Allow-Origin也并非是件容易的事，所以还是自己动手丰衣足食吧！Google了一通，得知jQuery的ajax方法，在<code class="highlighter-rouge">dataType</code>是<code class="highlighter-rouge">jsonp</code>或者<code class="highlighter-rouge">script</code>的时候，不会有这个Access-Control-Allow-Origin的问题，于是，我的第二个方案诞生了：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'DOMContentLoaded'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                <span class="na">url</span><span class="p">:</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">,</span> <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                <span class="na">dataType</span><span class="p">:</span> <span class="s1">'script'</span><span class="p">,</span> <span class="c1">// jsonp 会有parseerror</span>
                <span class="na">jsonp</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="na">timeout</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
                <span class="na">error</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">xhr</span><span class="p">.</span><span class="nx">about</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
                <span class="p">},</span>
                <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                    <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                    <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                    <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>这个方案成功绕开了CORS的安全策略问题，但新的问题又来了：即使是timeout了，ajax请求也无法被abort，浏览器还会在不停的loading…！分析原因：jQuery的ajax其实也是对XMLHttpRequest的封装，但貌似<code class="highlighter-rouge">dataType</code>在<code class="highlighter-rouge">jsonp</code>或<code class="highlighter-rouge">script</code>的情况下并不是走的XMLHttpRequest，而是通过向页面吐script标签来实现，也正因此，才不会受CORS策略的限制。</p>

<p>所以，看来还是要自己借助页面script或者img标签的加载来实现。不过，历史证明：<strong>大多数的轮子人家已经造好了的！</strong>这不，我就找到了这个<a href="https://github.com/jdfreder/pingjs">pingjs</a>。不过，pingjs也不会在超时后停止对资源的请求，所以我们要对这个js做点hack，第43行，在timeout时将img.src置空，如下：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span> <span class="nx">img</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="nx">reject</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s1">'Timeout'</span><span class="p">));</span> <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>

<span class="p">...</span>

</code></pre>
</div>

<p>如此，我的最终方案就变成这样：</p>
<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="p">...</span>

    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'DOMContentLoaded'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">ping</span><span class="p">(</span><span class="s1">'https://EXAMPLE.disqus.com/count.js'</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">delta</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
                <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'//EXAMPLE.disqus.com/embed.js'</span><span class="p">;</span>  <span class="c1">// IMPORTANT: Replace EXAMPLE with your forum shortname!</span>
                <span class="nx">s</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'data-timestamp'</span><span class="p">,</span> <span class="o">+</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
                <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">head</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">})();</span>
</code></pre>
</div>

<p>问题解决！不知道大家注意到没有，我ping的是<code class="highlighter-rouge">https://EXAMPLE.disqus.com/count.js</code>而不是<code class="highlighter-rouge">//EXAMPLE.disqus.com/embed.js</code>。其实原因很简单，count.js(1.5k)要远远小于embed.js(18k)！直接使用https也是因为这样省去了远端的redirect。</p>

<hr />

<p><em>注：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS访问控制</a>&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>用SAE Docker一个Ghost博客</title>
	  <link>//2017/04/docker-a-ghost-blog-by-sae.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-06T09:00:00+08:00</pubDate>
	  <guid>//2017/04/docker-a-ghost-blog-by-sae.html</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>其实这是之前在SAE部署Ghost之后写下的，迁移至此仅供参考，只是我已改投<a href="https://jekyllrb.com">Jekyll</a>和<a href="https://pages.github.com/">Github Pages</a>。</p>
</blockquote>

<!--more-->

<p>首先我们先来认识一下本文即将出场的几位主角（其实它们都在标题里了）：</p>

<ul>
  <li><a href="https://ghost.org/">Ghost</a>：基于NodeJS的开源博客系统</li>
  <li><a href="https://www.docker.com/">Docker</a>：应该是时下最流行的容器技术了吧，我们要基于它来构建Ghost服务</li>
  <li><a href="http://www.sinacloud.com/sae.html">SAE</a>：新浪云的云应用，也就是我们要用新浪云的云应用服务来运行我们的博客</li>
</ul>

<blockquote>
  <p>新浪云的<a href="http://sae.sina.com.cn/?m=appmarket&amp;a=index">云市场</a>里是有Ghost镜像的，你完全可以点击几下鼠标就可以用它来很轻松的部署一个Ghost实例，但对于我这种喜欢自己鼓捣的人来说，当然是不愿意在这方面节省时间的。</p>
</blockquote>

<p>好了，言归正传！</p>

<h3 id="第1步-创建云应用sae">第1步 创建云应用SAE</h3>

<p>盖房子要先买地的，所以，首先我们要申请一个SAE（当然你要先保证自己的账户中有足够的云豆，其实就是充值啦）：进入云应用SAE控制台，在<em>“应用管理”</em>中点击<em>“+创建新应用”</em>，然后就会进入如下应用创建页面</p>

<p><img src="/assets/images/2017/04/create-sae.png" alt="创建云应用" /></p>

<blockquote>
  <p>开发语言选<em>“自定义”</em>，部署环境选<em>“Dockerfile”</em>，环境配置和实例个数我建议先选1个基础配置就可以了，这个配置可以在部署成功以后随时根据实际需求来调整的，当然越多越高的配置也相应会有更多的支出。</p>
</blockquote>

<p>云应用创建成功，进入云应用管理，接下来我们要申请数据库和存储，虽然容器有5G的空间，你完全可以使用sqlite作为数据库，把内容数据和文件都保存在这个容器中，但问题是，只要你更新Dockerfile，容器就会重新构建，你的数据也就没了！所以就不要吝啬这点投入了，在<em>“数据库与缓存服务”</em>中，创建一个<em>“共享型MySQL”</em>，当然，够豪的话，你也可以创建独享型MySQL；在<em>“存储与CDN服务”</em>中新建一个<em>“共享存储”</em>，容量视个人需求而定吧，反正也是随时可以调整的。这个存储在后续的步骤中是要挂载到容器上的。</p>

<h3 id="第2步-编写dockerfile">第2步 编写Dockerfile</h3>

<blockquote>
  <p>考验你的时刻到了，这里你要用到Git、Dockerfile、nodejs、bash等等相关知识</p>
</blockquote>

<p>首先我们要git迁出代码，在SAE控制台的“应用”»“代码管理”中，可以看到你的Git仓库及代码部署说明，可以参照他的sample来操作，也可以clone迁出，当然不管哪种方式，你看到的是一个空仓库，我们要自己来创建必要的Dockerfile文件、ENTRYPOINT文件和Ghost的config.js配置文件。</p>

<blockquote>
  <p>其实<a href="https://hub.docker.com/">Docker Hub</a>中也有Ghost官方提供的镜像的(<a href="https://hub.docker.com/_/ghost/">点这里</a>)，你可以参考他的Dockerfile，我并没有试过这个镜像是否可以直接在SAE上运行</p>
</blockquote>

<p>我的Dockerfile大概是下面这样的（<em>GHOST_CONTENT参考注<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></em>）：</p>

<pre class="highlight"><code class="language-docker">FROM node:4-slim

ENV GHOST_SOURCE=/var/www/ghost 
# 参考注1.
ENV GHOST_CONTENT=/path/to/your/content
ENV NODE_ENV=production
ENV GOSU_VERSION=1.10 
ENV GHOST_VERSION=0.11.5

VOLUME $GHOST_CONTENT

RUN set -x \
    &amp;&amp; apt-get update \
    &amp;&amp; apt-get install -y curl unzip rsync ca-certificates --no-install-recommends \
    &amp;&amp; rm -rf /var/lib/apt/lists/* \
	&amp;&amp; curl -L "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"  -o /usr/local/bin/gosu \
	&amp;&amp; curl -L "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc" -o /usr/local/bin/gosu.asc \
	&amp;&amp; export GNUPGHOME="$(mktemp -d)" \
	&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&amp;&amp; rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
	&amp;&amp; chmod +x /usr/local/bin/gosu \
	&amp;&amp; gosu nobody true \
    &amp;&amp; mkdir -p "$GHOST_SOURCE" \
    &amp;&amp; curl -L "https://github.com/TryGhost/Ghost/releases/download/$GHOST_VERSION/Ghost-$GHOST_VERSION.zip" -o /var/www/ghost.zip \
    &amp;&amp; unzip -uo /var/www/ghost.zip -d "$GHOST_SOURCE" \
    &amp;&amp; rm -f /var/www/ghost.zip \
    &amp;&amp; cd "$GHOST_SOURCE" \
    &amp;&amp; npm install -g npm@latest \
    &amp;&amp; npm install --production \
    &amp;&amp; npm cache clean \
    &amp;&amp; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false curl unzip ca-certificates \
    &amp;&amp; rm -rf /tmp/* \
    &amp;&amp; groupadd ghost \
    &amp;&amp; useradd --create-home --home-dir /home/ghost -g ghost ghost \
    &amp;&amp; chown -R ghost:ghost "$GHOST_CONTENT"

WORKDIR $GHOST_SOURCE

COPY ghost-config.js "$GHOST_SOURCE/config.js"

COPY docker-entrypoint.sh /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]

CMD ["npm", "start"]
</code></pre>

<p>docker-entrypoint.sh是这个样子：</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> -e

rsync -r <span class="s2">"</span><span class="nv">$GHOST_SOURCE</span><span class="s2">/content/"</span> <span class="s2">"</span><span class="nv">$GHOST_CONTENT</span><span class="s2">/"</span>

<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$*</span><span class="s2">"</span> <span class="o">==</span> npm<span class="k">*</span>start<span class="k">*</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="k">$(</span>id -u<span class="k">)</span><span class="s2">"</span> <span class="o">=</span> <span class="s1">'0'</span> <span class="o">]</span>; <span class="k">then
	</span>chown -R ghost:ghost <span class="s2">"</span><span class="nv">$GHOST_CONTENT</span><span class="s2">"</span>
    <span class="nb">exec </span>gosu ghost <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre>
</div>

<p>ghost-config.js大概是这个样子（<em>url配置参考注<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></em>）：</p>

<div class="language-javascript highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">),</span>
    <span class="nx">config</span><span class="p">;</span>

<span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">production</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'http://yourdomain.com/'</span><span class="p">,</span> <span class="c1">// 参考注2</span>
        <span class="na">mail</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">database</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">client</span><span class="p">:</span> <span class="s2">"mysql"</span><span class="p">,</span>
            <span class="na">connection</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">host</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_HOST</span><span class="p">,</span>
                <span class="na">port</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MYSQL_PORT</span><span class="p">,</span>
                <span class="na">user</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ACCESSKEY</span><span class="p">,</span>
                <span class="na">password</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SECRETKEY</span><span class="p">,</span>
                <span class="na">database</span><span class="p">:</span> <span class="s1">'app_'</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">APPNAME</span><span class="p">,</span>
                <span class="na">charset</span><span class="p">:</span> <span class="s2">"utf8"</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">contentPath</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GHOST_CONTENT</span><span class="p">,</span> <span class="s1">'/'</span><span class="p">)</span>
        <span class="p">},</span>
        <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="s1">'0.0.0.0'</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</code></pre>
</div>

<h3 id="第3步-构建你的ghost">第3步 构建你的Ghost</h3>

<p>其实这一步就是git comit &amp; push你的代码，然后你就静待花开吧，如果一切顺利，在push收到成功的信息后，你的blog就在那里了。</p>

<p>哦，别忘了把你的<em>“共享存储”</em>挂载到Dockerfile中$GHOST_CONTENT所指定的路径上并重启你的容器。</p>

<p>Enjoy!</p>

<hr />

<p><em>注：</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>GHOST_CONTENT 就是你在第1步中申请的“共享存储”的挂载路径&nbsp;<a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>这是你博客的网址，你可以用SAE的二级网址，比如这样：<code class="language-json highlighter-rouge"><span class="err">url:</span><span class="w"> </span><span class="err">'http://'</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">process.env.APPNAME</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">'.applinzi.com/'</span></code>；或者像我，先在SAE控制台的“应用”&gt;“环境变量”中添加一个环境变量，例如：SITEURL，值为：”http://yourdomain.com/”，然后你的配置就可以这样写： <code class="language-json highlighter-rouge"><span class="err">url:</span><span class="w"> </span><span class="err">process.env.SITEURL</span></code> 。&nbsp;<a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>Welcome to my pages</title>
	  <link>//2017/04/welcome-to-my-pages.html</link>
	  <author>Devy</author>
	  <pubDate>2017-04-05T17:30:00+08:00</pubDate>
	  <guid>//2017/04/welcome-to-my-pages.html</guid>
	  <description><![CDATA[
	     <p>欢迎来到我的Github Page，当然这也将被用作我的个人博客。</p>

<p>我不是一个高产的写作者，只是年纪大了，很多东西总是会记不起，所以这可能就是我用来记录这些记忆碎片的地方。</p>

<!--more-->

<p>其实在此之前，我还用过Blogger、Baidu空间、SAE，无奈这些服务要么被墙、要么死掉、要么被死死监管，最终落脚在此，希望会是个好的归宿吧。</p>

<p>我也想是不是要把之前那些po再贴过来，但是想想最后还是放弃了，有些东西丢了其实真的没必要再捡回来，尤其是这日新月异信息爆炸的时代！</p>

<p>我们还是来开启新篇章吧~</p>

	  ]]></description>
	</item>


</channel>
</rss>
